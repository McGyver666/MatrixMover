/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AutoSceneCycler.java
 *
 * Created on 04.02.2012, 18:42:55
 */
package com.gyver.matrixmover.gui;

import com.gyver.matrixmover.core.Controller;
import com.gyver.matrixmover.core.timer.AutoSceneCyclerTimerTask;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.Timer;

/**
 *
 * @author Gyver
 */
public class AutoSceneCycler extends javax.swing.JDialog {

    private static AutoSceneCycler autoSceneCycler = null;
    private Timer timer = null;

    /** Make this a singelton to keep settings easily */
    private AutoSceneCycler(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setTitle("Auto Scene Cycler");
        initComponents();
        centerWindow();
    }

    public static AutoSceneCycler getInstance() {
        if (autoSceneCycler == null) {
            autoSceneCycler = new AutoSceneCycler(Frame.getFrameInstance(), true);
        }
        return autoSceneCycler;
    }

    private void centerWindow() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        this.setLocation((screenSize.width - frameSize.width) / 2,
                (screenSize.height - frameSize.height) / 2);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        tfSecondsToWait = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfLeftSceneList = new javax.swing.JTextField();
        tfRightSceneList = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lStatus = new javax.swing.JLabel();
        bStart = new javax.swing.JButton();
        bStop = new javax.swing.JButton();
        bExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Auto Scene Cycler"); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Seconds to stay on every scene:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        tfSecondsToWait.setText("60");
        tfSecondsToWait.setMaximumSize(new java.awt.Dimension(50, 22));
        tfSecondsToWait.setMinimumSize(new java.awt.Dimension(50, 22));
        tfSecondsToWait.setPreferredSize(new java.awt.Dimension(50, 22));
        tfSecondsToWait.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSecondsToWaitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 0, 0);
        getContentPane().add(tfSecondsToWait, gridBagConstraints);

        jLabel2.setText("Left scene list:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        tfLeftSceneList.setText("1, 2, 3, 4");
        tfLeftSceneList.setMaximumSize(new java.awt.Dimension(300, 22));
        tfLeftSceneList.setMinimumSize(new java.awt.Dimension(300, 22));
        tfLeftSceneList.setPreferredSize(new java.awt.Dimension(300, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 0, 10);
        getContentPane().add(tfLeftSceneList, gridBagConstraints);

        tfRightSceneList.setText("1, 2, 3, 4");
        tfRightSceneList.setMaximumSize(new java.awt.Dimension(300, 22));
        tfRightSceneList.setMinimumSize(new java.awt.Dimension(300, 22));
        tfRightSceneList.setPreferredSize(new java.awt.Dimension(300, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 0, 10);
        getContentPane().add(tfRightSceneList, gridBagConstraints);

        jLabel3.setText("Right scene list:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(jLabel3, gridBagConstraints);

        jLabel4.setText("Status:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(jLabel4, gridBagConstraints);

        lStatus.setFont(new java.awt.Font("Tahoma", 1, 13));
        lStatus.setForeground(new java.awt.Color(255, 0, 0));
        lStatus.setText("Stopped");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 0);
        getContentPane().add(lStatus, gridBagConstraints);

        bStart.setText("Start");
        bStart.setMaximumSize(new java.awt.Dimension(65, 25));
        bStart.setMinimumSize(new java.awt.Dimension(65, 25));
        bStart.setPreferredSize(new java.awt.Dimension(65, 25));
        bStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStartActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        getContentPane().add(bStart, gridBagConstraints);

        bStop.setText("Stop");
        bStop.setMaximumSize(new java.awt.Dimension(65, 25));
        bStop.setMinimumSize(new java.awt.Dimension(65, 25));
        bStop.setPreferredSize(new java.awt.Dimension(65, 25));
        bStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStopActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        getContentPane().add(bStop, gridBagConstraints);

        bExit.setText("Hide");
        bExit.setMaximumSize(new java.awt.Dimension(65, 25));
        bExit.setMinimumSize(new java.awt.Dimension(65, 25));
        bExit.setPreferredSize(new java.awt.Dimension(65, 25));
        bExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 10);
        getContentPane().add(bExit, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfSecondsToWaitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSecondsToWaitActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_tfSecondsToWaitActionPerformed

    private void bExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_bExitActionPerformed

    private void bStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStartActionPerformed
        timer = new Timer();
        AutoSceneCyclerTimerTask asctt = new AutoSceneCyclerTimerTask(Controller.getControllerInstance());
        try {
            asctt.setLeftSceneListFromString(tfLeftSceneList.getText());
            asctt.setRightSceneListFromString(tfRightSceneList.getText());
            int timeToWait = Integer.parseInt(tfSecondsToWait.getText()) * 1000;
            timer.scheduleAtFixedRate(asctt, 0, timeToWait);
            setTextRunnig();
        } catch (NumberFormatException nfe) {
            Frame.getFrameInstance().showWarning("Input is not valid. Check number format.");
        }


    }//GEN-LAST:event_bStartActionPerformed

    private void bStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStopActionPerformed
        if (timer != null) {
            timer.cancel();
            setTextStopped();
        }
    }//GEN-LAST:event_bStopActionPerformed

    public void setTextRunnig() {
        lStatus.setText("Running");
        lStatus.setForeground(new java.awt.Color(0, 255, 0));
    }
    public void setTextStopped() {
        lStatus.setText("Stopped");
        lStatus.setForeground(new java.awt.Color(255, 0, 0));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bExit;
    private javax.swing.JButton bStart;
    private javax.swing.JButton bStop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lStatus;
    private javax.swing.JTextField tfLeftSceneList;
    private javax.swing.JTextField tfRightSceneList;
    private javax.swing.JTextField tfSecondsToWait;
    // End of variables declaration//GEN-END:variables
}
