/*
 * Copyright (C) 2012 Gyver
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.gyver.matrixmover.gui.generator;

import com.gyver.matrixmover.generator.RandomPixel;
import com.gyver.matrixmover.gui.listener.interfaces.TFSListener;
import java.awt.Color;
import javax.swing.event.ChangeEvent;

/**
 * Configuration dialog for SimpleColor generator
 * 
 * @author Gyver
 */
public class RandomPixelConfiguration extends javax.swing.JDialog {

    public RandomPixel generator = null;

    /** Creates new form SimpleColorConfiguration
     * @param parent
     * @param modal
     * @param generator */
    public RandomPixelConfiguration(java.awt.Frame parent, boolean modal, RandomPixel generator) {
        super(parent, modal);
        this.setTitle(generator.getName().toString()+" Configuration");
        this.generator = generator;
        initComponents();
        
        tfsMinThres.setMinimum(0);
        tfsMinThres.setMaximum(255);
        tfsTicksToRefresh.setMinimum(1);
        tfsTicksToRefresh.setMaximum(200);
        tfsColorNoise.setMinimum(0);
        tfsColorNoise.setMaximum(255);
        
        tfsMinThres.setValue(generator.getMinThres());
        tfsTicksToRefresh.setValue(generator.getTicksToRefresh());
        tfsColorNoise.setValue(generator.getColorNoise());
        
        tfsMinThres.addTFSListener(new TFSListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                changeMinThres(tfsMinThres.getValue());
            }
        });
        
        
        tfsTicksToRefresh.addTFSListener(new TFSListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                changeTicksToRefresh(tfsTicksToRefresh.getValue());
            }
        });
        
        tfsColorNoise.addTFSListener(new TFSListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                changeColorNoise(tfsColorNoise.getValue());
            }
        });
        
       setLocationRelativeTo(null);
    }
    
    private void changeMinThres(int minThres){
        generator.setMinThres(minThres);
    }

    private void changeTicksToRefresh(int ticksToRefresh){
        generator.setTicksToRefresh(ticksToRefresh);
    }

    private void changeColorNoise(int colorNoise){
        generator.setColorNoise(colorNoise);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tfsMinThres = new com.gyver.matrixmover.gui.component.JTextFieldSlider();
        tfsTicksToRefresh = new com.gyver.matrixmover.gui.component.JTextFieldSlider();
        tfsColorNoise = new com.gyver.matrixmover.gui.component.JTextFieldSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        bSaveExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 10);
        getContentPane().add(tfsMinThres, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        getContentPane().add(tfsTicksToRefresh, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        getContentPane().add(tfsColorNoise, gridBagConstraints);

        jLabel1.setText("Minimum Thres:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        getContentPane().add(jLabel1, gridBagConstraints);

        jLabel2.setText("Mean Ticks to Refresh:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setText("Color Noise:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        getContentPane().add(jLabel3, gridBagConstraints);

        bSaveExit.setText("Save + Exit");
        bSaveExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveExitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 10, 10);
        getContentPane().add(bSaveExit, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bSaveExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_bSaveExitActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bSaveExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private com.gyver.matrixmover.gui.component.JTextFieldSlider tfsColorNoise;
    private com.gyver.matrixmover.gui.component.JTextFieldSlider tfsMinThres;
    private com.gyver.matrixmover.gui.component.JTextFieldSlider tfsTicksToRefresh;
    // End of variables declaration//GEN-END:variables
}
