/*
 * Copyright (C) 2012 Gyver
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.gyver.matrixmover.gui;

import com.gyver.matrixmover.core.Controller;
import com.gyver.matrixmover.core.MatrixData;
import com.gyver.matrixmover.core.VisualSetup;
import com.gyver.matrixmover.effect.Effect.EffectName;
import com.gyver.matrixmover.generator.enums.GeneratorName;
import com.gyver.matrixmover.mixer.Mixer.MixerName;
import com.gyver.matrixmover.properties.PropertiesHelper;
import javax.swing.JOptionPane;

/**
 * This is a singelton. The Main frame of the MatrixMover gui. Holds all the panels
 * 
 * @author Gyver
 */
public class Frame extends javax.swing.JFrame {

    private PropertiesHelper ph = null;
    private MatrixData md = null;
    private static Frame instance = null;

    /** Creates new form Frame */
    private Frame() {
    }

    /**
     * Returns the instance of this.
     * @return
     */
    public static Frame getFrameInstance() {
        if (instance == null) {
            instance = new Frame();
        }
        return instance;
    }

    /**
     * Initiates this frame instance
     * @param ph the properties helper
     * @param cont the controller
     */
    public void initFrame(PropertiesHelper ph, Controller cont) {
        this.ph = ph;
        this.md = cont.getMatrixData();

        initComponents();
        effectPanelLeft.setSide(Controller.BOTTOM_SIDE);
        effectPanelRight.setSide(Controller.TOP_SIDE);

        generatorSetupLeft.setSide(Controller.BOTTOM_SIDE);
        generatorSetupRight.setSide(Controller.TOP_SIDE);

        effectPanelLeft.getLedScreen().init(ph, md);
        effectPanelRight.getLedScreen().init(ph, md);
        masterLedScreen.init(ph, md);
        cont.setLedScreens(effectPanelLeft.getLedScreen(), effectPanelRight.getLedScreen(), masterLedScreen);

        setUpComboBoxes();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        masterSettings1 = new com.gyver.matrixmover.gui.MasterSettings();
        effectPanelLeft = new com.gyver.matrixmover.gui.GeneratorPanel();
        effectPanelRight = new com.gyver.matrixmover.gui.GeneratorPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        generatorSetupRight = new com.gyver.matrixmover.gui.GeneratorSetup();
        jScrollPane2 = new javax.swing.JScrollPane();
        generatorSetupLeft = new com.gyver.matrixmover.gui.GeneratorSetup();
        jPanel1 = new javax.swing.JPanel();
        masterSettings2 = new com.gyver.matrixmover.gui.MasterSettings();
        masterLedScreen = new com.gyver.matrixmover.gui.LedScreen();
        logoPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        masterPanel = new com.gyver.matrixmover.gui.MasterPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MatrixMover");
        setMinimumSize(new java.awt.Dimension(1150, 700));
        setName("FrameMatrixMover"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        effectPanelLeft.setMinimumSize(new java.awt.Dimension(420, 300));
        effectPanelLeft.setPreferredSize(new java.awt.Dimension(420, 300));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(effectPanelLeft, gridBagConstraints);

        effectPanelRight.setMinimumSize(new java.awt.Dimension(420, 300));
        effectPanelRight.setPreferredSize(new java.awt.Dimension(420, 300));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(effectPanelRight, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(5, 250));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(100, 250));
        jScrollPane1.setViewportView(generatorSetupRight);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 400;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(13, 5, 7, 10);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setViewportView(generatorSetupLeft);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 400;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(13, 5, 7, 10);
        getContentPane().add(jScrollPane2, gridBagConstraints);

        jPanel1.setMinimumSize(new java.awt.Dimension(250, 361));
        jPanel1.setPreferredSize(new java.awt.Dimension(250, 361));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        masterSettings2.setMinimumSize(new java.awt.Dimension(125, 280));
        masterSettings2.setPreferredSize(new java.awt.Dimension(120, 136));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(masterSettings2, gridBagConstraints);

        masterLedScreen.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(masterLedScreen, gridBagConstraints);

        logoPanel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        logoPanel.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(logoPanel, gridBagConstraints);

        masterPanel.setMinimumSize(new java.awt.Dimension(120, 280));
        masterPanel.setPreferredSize(new java.awt.Dimension(300, 350));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(masterPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        effectPanelLeft.recomputeLedPixelSize();
        effectPanelRight.recomputeLedPixelSize();
        masterLedScreen.recomputePixelSize();
        masterLedScreen.repaint();
    }//GEN-LAST:event_formComponentResized

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Controller.getControllerInstance().saveScenes();
    }//GEN-LAST:event_formWindowClosing
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.gyver.matrixmover.gui.GeneratorPanel effectPanelLeft;
    private com.gyver.matrixmover.gui.GeneratorPanel effectPanelRight;
    private com.gyver.matrixmover.gui.GeneratorSetup generatorSetupLeft;
    private com.gyver.matrixmover.gui.GeneratorSetup generatorSetupRight;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel logoPanel;
    private com.gyver.matrixmover.gui.LedScreen masterLedScreen;
    private com.gyver.matrixmover.gui.MasterPanel masterPanel;
    private com.gyver.matrixmover.gui.MasterSettings masterSettings1;
    private com.gyver.matrixmover.gui.MasterSettings masterSettings2;
    // End of variables declaration//GEN-END:variables

    private void setUpComboBoxes() {

        generatorSetupLeft.setGeneratorListToComboBoxes(GeneratorName.values());
        generatorSetupRight.setGeneratorListToComboBoxes(GeneratorName.values());

        generatorSetupLeft.setEffectListToComboBoxes(EffectName.values());
        generatorSetupRight.setEffectListToComboBoxes(EffectName.values());

        generatorSetupLeft.setMixerListToComboBoxes(MixerName.values());
        generatorSetupRight.setMixerListToComboBoxes(MixerName.values());
    }

    /**
     * Sets the combo boxes to the correct indices if the scene has changed
     * @param side the side of the gui where to set the comboboxes
     * @param newActiveVisualSetup the visual setup to set the comboboxes indices to
     */
    public void setComboBoxesForChangedScene(int side, VisualSetup newActiveVisualSetup) {

        if (side == Controller.BOTTOM_SIDE) {
            setComboBoxes(generatorSetupLeft, newActiveVisualSetup);
        } else if (side == Controller.TOP_SIDE) {
            setComboBoxes(generatorSetupRight, newActiveVisualSetup);
        }
    }

    private void setComboBoxes(GeneratorSetup generatorSetup, VisualSetup newActiveVisualSetup) {
        //remove all from actionlistener when setting a new scene
        //else scene is marked as changed, due to actionlistener fired!
        generatorSetup.removeAllFromActionListener();

        generatorSetup.getCbGenerator1().setSelectedItem(newActiveVisualSetup.getGenerator1().getName());
        generatorSetup.getCbGenerator2().setSelectedItem(newActiveVisualSetup.getGenerator2().getName());
        generatorSetup.getCbGenerator3().setSelectedItem(newActiveVisualSetup.getGenerator3().getName());
        generatorSetup.getCbGenerator4().setSelectedItem(newActiveVisualSetup.getGenerator4().getName());
        generatorSetup.getCbGenerator5().setSelectedItem(newActiveVisualSetup.getGenerator5().getName());
        
        generatorSetup.getCbEffect1().setSelectedItem(newActiveVisualSetup.getEffect1().getName());
        generatorSetup.getCbEffect2().setSelectedItem(newActiveVisualSetup.getEffect2().getName());
        generatorSetup.getCbEffect3().setSelectedItem(newActiveVisualSetup.getEffect3().getName());
        generatorSetup.getCbEffect4().setSelectedItem(newActiveVisualSetup.getEffect4().getName());
        generatorSetup.getCbEffect5().setSelectedItem(newActiveVisualSetup.getEffect5().getName());
        
        generatorSetup.getCbMixer2().setSelectedItem(newActiveVisualSetup.getMixer2().getName());
        generatorSetup.getCbMixer3().setSelectedItem(newActiveVisualSetup.getMixer3().getName());
        generatorSetup.getCbMixer4().setSelectedItem(newActiveVisualSetup.getMixer4().getName());
        generatorSetup.getCbMixer5().setSelectedItem(newActiveVisualSetup.getMixer5().getName());
        
        generatorSetup.getIntensitySlider1().setValue(newActiveVisualSetup.getGenerator1Intensity());
        generatorSetup.getIntensitySlider2().setValue(newActiveVisualSetup.getGenerator2Intensity());
        generatorSetup.getIntensitySlider3().setValue(newActiveVisualSetup.getGenerator3Intensity());
        generatorSetup.getIntensitySlider4().setValue(newActiveVisualSetup.getGenerator4Intensity());
        generatorSetup.getIntensitySlider5().setValue(newActiveVisualSetup.getGenerator5Intensity());
        
        generatorSetup.addAllToActionListener();

    }

    /**
     * Returns the left generator panel
     * @return the panel
     */
    public GeneratorPanel getLeftGeneratorPanel() {
        return this.effectPanelLeft;
    }

    /**
     * Returns the right generator panel
     * @return the panel
     */
    public GeneratorPanel getRightGeneratorPanel() {
        return this.effectPanelRight;
    }

    /**
     * Returns the left generator setup panel
     * @return the panel
     */
    public GeneratorSetup getLeftGeneratorSetup() {
        return this.generatorSetupLeft;
    }

    /**
     * Returns the right generator setup panel
     * @return the panel
     */
    public GeneratorSetup getRightGeneratorSetup() {
        return this.generatorSetupRight;
    }

    /**
     * Returns the master panel
     * @return the panel
     */
    public com.gyver.matrixmover.gui.MasterPanel getMasterPanel() {
        return masterPanel;
    }

    /**
     * Sets the audio level
     * @param level the level
     */
    public void setAudioLevel(float[] level) {
        this.masterSettings2.setAudioLevel(level);
    }

    /**
     * Shows a warning to the user.
     * @param string the warning to display
     */
    public void showWarning(String string) {
        JOptionPane.showMessageDialog(this, string, "Warning", JOptionPane.WARNING_MESSAGE);
    }
}
